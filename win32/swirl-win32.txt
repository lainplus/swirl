
    Swirl
    =====

    This file contains specific information for usage of Swirl
    under MS-Windows.  See swirl-doc.html to have all the features.


    Installation from the binary ZIP package:
    -----------------------------------------
    Unzip the package to a directory of your choice.
    

    Set the system PATH:
    --------------------
    To be able to invoke the compiler from everywhere on your computer by
    just typing "swirl", please add the directory containing swirl.exe to your
    system PATH.


    Include and library search paths
    --------------------------------
    On Windows,  the standard "include" and "lib" directories are searched
    relatively from the location of the executables (swirl.exe, libswirl.dll).


    Examples:
    ---------
    Open a console window (DOS box) and 'cd' to the examples directory.

    For the 'Fibonacci' example type:

	swirl fib.c

    For the 'Hello Windows' GUI example type:

	swirl hello_win.c

    For the 'Hello DLL' example type

	swirl -shared dll.c
	swirl -impdef dll.dll (optional)
        swirl hello_dll.c dll.def


    Using libswirl as JIT compiler in your program
    --------------------------------------------
    Check out the 'libswirl_test' example:

    - Running it from source:
        swirl -I libswirl libswirl/libswirl.def -run examples/libswirl_test.c

    - Compiling with Swirl:
        swirl examples/libswirl_test.c -I libswirl libswirl/libswirl.def

    - Compiling with MinGW:
        gcc examples/libswirl_test.c -I libswirl libswirl.dll -o libswirl_test.exe

    - Compiling with MSVC:
        lib /def:libswirl\libswirl.def /out:libswirl.lib
        cl /MD examples/libswirl_test.c -I libswirl libswirl.lib


    Import Definition Files:
    ------------------------
    To link with Windows system DLLs, Swirl uses import definition
    files (.def) instead of libraries.

    The now built-in 'tiny_impdef' program may be used to make
    additional .def files for any DLL. For example

        swirl -impdef [-v] opengl32.dll [-o opengl32.def]

    Put opengl32.def into the swirl/lib directory.  Specify -lopengl32 at
    the Swirl commandline to link a program that uses opengl32.dll.


    Header Files:
    -------------
    The system header files (except _mingw.h) are from the MinGW
    distribution:

	http://www.mingw.org/

    From the windows headers, only a minimal set is included.  If you need
    more,  get MinGW's "w32api" package.  Extract the files from "include"
    into your "swirl/include/winapi" directory.


    Resource Files:
    ---------------
    Swirl can link windows resources in coff format as generated by MinGW's
    windres.exe.  For example:

        windres -O coff app.rc -o appres.o
        swirl app.c appres.o -o app.exe

    Compilation from source:
    ------------------------
    * You can use the MinGW and MSYS tools available at
        http://www.mingw.org
        http://www.mingw-w64.org
        http://www.msys2.org

      Untar the Swirl archive and type in the MSYS shell:
        ./configure [--prefix installpath]
        make
        make install

      The default install location is c:\Program Files\swirl

      Cygwin can be used too with its mingw cross-compiler installed:
        ./configure --cross-prefix=i686-w64-mingw32-
        (the prefix may vary)

    * Alternatively you can compile Swirl with just GCC from MinGW using
        > build-swirl.bat (from the win32 directory)

      Also MSVC can be used with the "VSTools Developer Command Prompt":
        > build-swirl.bat -c cl

      or with an existing swirl (needs to be in a different directory)
        > build-swirl.bat -c some-swirl-dir\swirl.exe

      Also you can copy/install everything into another directory:
        > build-swirl.bat -i <dir>

    Limitations:
    ------------
    - On the object file level, currently Swirl supports only the ELF format,
      not COFF as used by MinGW and MSVC.  It is not possible to exchange
      object files or libraries between Swirl and these compilers.

      However libraries for Swirl from objects by Swirl can be made using
        swirl -ar lib.a files.o ,,,

    - No leading underscore is generated in the ELF symbols.
